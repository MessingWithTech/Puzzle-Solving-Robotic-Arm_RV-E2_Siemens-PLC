// Basic Application program for O2Dx

// connected to S7-1200 station via CPU-internal Profinet interface
// for S7-12xx CPU Firmware &lt; V4.1

// Function Block Version 2.0 Rev. 3

// With this FB you can
// - establish TCP connection to the sensor
// - trigger the sensor and read the result
// - select aktive sensor application

// ---- Inputs ----
// IPAddr1..4 : 149.205.120.91 IP address of the sensor
// PortNo : port-No. of sensor process interface
// Connect : establish TCP sonnection to the sensor
// ConnID : unique ID as system reference for the connection to the sensor
// TimeOutTime : max. waiting time for response from the sensor
// Trigger : on rising edge send trigger command to sensor
// ChangeApp, AppNo : on rising edge of ChangeApp activate in AppNo
// assigned application-No. (3 digits) in the sensor

// ---- Outputs ----
// Busy : no command accepted
// Done : command successful completed
// Error : error occurred
// Status : status information
// ExtStatus : extended status information
// ActAppNo : active sensor application-No.
// RcvdLen : data length in receive buffer
// RcvdData : from sensor received data
// ******************************************************************************************************
// Disclaimer of Warranties

// ifm disclaims to the fullest extent authorized by law any and all warranties,
// whether express or implied, including, without limitation,
// any implied warranties of title, non-infringement, quiet enjoyment,
// integration, merchantability or fitness for a particular purpose.

// Without limitation of the foregoing, ifm expressly does not warrant that:
// (a) the software will meet your requirements or expectations;
// (b) the software or the software content will be free of bugs, errors,
// viruses or other defects;
// (c) any results, output, or data provided through or generated by the software
// will be accurate, up-to-date, complete or reliable;
// (d) the software will be compatible with third party software;
// (e) any errors in the software will be corrected
// DEMO SOFTWARE AND TEMPLATES

// Demo software and templates are provided ìas isî and ìas availableî,
// without any warranty of any kind, either express or implied.
// The User acknowledges and agrees to use the software at Userís own risk.
// In no event shall ifm be held liable for any direct, indirect, incidental
// or consequential damages arising out of the use of or inability to use the software.
// User may use the software solely for demonstration purposes
// and to assess the software functionalities and capabilities.
// Software written specifically for Customer

// 1. The software created and used is put together by ifm specially to the customer
// using modular software components made by ifm for numerous applications (Standard software modules)
// and adapted to the contractual service required (customer-specific application program).

// 2. Upon complete payment of the purchase price for the customer-specific application program,
// ifm transfers the non-exclusive, locally and temporarily unrestricted usage right
// thereof to the customer, without the customer acquiring any rights of any kind
// to the standard software module on which the individual or customer-specific adaptation is based.
// Notwithstanding these provisions, ifm reserves the right to produce and offer
// customer specific software solutions of the same kind for other customers
// based on other terms of reference. In any case ifm retains a simple right of usage
// of the customerñspecific solution for internal purposes.

// 3. Upon acceptance of the program, User acknowledges and agrees to use the software
// at Userís own risk. User also acknowledges and agrees upon acceptance of the program
// that the software meets the requirements of the specifications agreed upon.
// ifm disclaims any and all warranties, in particular regarding fitness of the software
// for a particular purpose.
// ******************************************************************************************************
// reset error signal
#xError := #xError AND #xUserAction; // initialize error signal if no user action active

// read user inputs
#XreTrigger := #Trigger AND NOT #xprevTrigger; // rising edge of input TRIGGER
#xprevTrigger := #Trigger; // store state for edge detection
#XreChangeApp := #ChangeApp AND NOT #xprevChangeApp; // rising edge of input CHANGE APPLICATION
#xprevChangeApp := #ChangeApp; // store state for edge detection

// check if user inputs valid
IF NOT #xError THEN // no error occurred yet
IF (#XreTrigger OR #XreChangeApp) AND #Busy THEN
// command input activated while output BUSY still active
#xError := TRUE;
#wErrorCode := 16#8301; // set error code
#wExtErrorCode := 0;
ELSIF (#XreTrigger OR #XreChangeApp) AND NOT #Connect THEN
// command input activated while input CONNECT = FALSE
#xError := TRUE;
#wErrorCode := 16#8302; // set error code
#wExtErrorCode := 0;
ELSIF #XreTrigger AND #XreChangeApp THEN
// command inputs activated simultaniously
#xError := TRUE;
#wErrorCode := 16#8303; // set error code
#wExtErrorCode := 0;
END_IF;
END_IF; // check if user inputs valid

// check size of external receive buffer
#XErrRcvBuf := #DataArrayEnd &lt;= 0;
IF #XErrRcvBuf AND NOT #xError THEN // error external receive buffer length
#xError := TRUE;
#wErrorCode := 16#8103; // set error code
#wExtErrorCode := 0;
END_IF; // error external receive buffer length

// initialize external receive buffer
IF #xInitExtRcvBuf AND NOT #XErrRcvBuf THEN
FOR #iTemp := 0 TO #DataArrayEnd DO // loop complete receive buffer
#RcvdData[#iTemp] := ' '; // set initial value
END_FOR; // loop complete receive buffer
#xInitExtRcvBuf := FALSE; // reset request
END_IF; // initialize external receive buffer

// set connection parameter
IF #Connect AND NOT #xprevConnect THEN // rising edge of input CONNECT
// fill Profinet connection structure
#stConnSetPN.BLOCK_LENGTH := 64;
#stConnSetPN.ID := UINT_TO_WORD(#ConnID);
#stConnSetPN.CONNECTION_TYPE := 17; // TCP/IP
#stConnSetPN.ACTIVE_EST := true;
#stConnSetPN.LOCAL_DEVICE_ID := 1;
#stConnSetPN.LOCAL_TSAP_ID_LEN := 0;
#stConnSetPN.REM_SUBNET_ID_LEN := 0;
#stConnSetPN.REM_STADDR_LEN := 4;
#stConnSetPN.REM_TSAP_ID_LEN := 2;
#stConnSetPN.NEXT_STADDR_LEN := 0;
FOR #iTemp := 1 TO 16 DO // initial values
#stConnSetPN.LOCAL_TSAP_ID[#iTemp] := 0;
#stConnSetPN.REM_TSAP_ID[#iTemp] := 0;
END_FOR; // set initial values
FOR #iTemp := 1 TO 6 DO // set initial values
#stConnSetPN.REM_SUBNET_ID[#iTemp] := 0;
#stConnSetPN.REM_STADDR[#iTemp] := 0;
#stConnSetPN.NEXT_STADDR[#iTemp] := 0;
END_FOR; // set initial values
#stConnSetPN.SPARE := 0;

// enter IP address and port-No. into connection structure
#stConnSetPN.REM_STADDR[1] := #IPAddr1;
#stConnSetPN.REM_STADDR[2] := #IPAddr2;
#stConnSetPN.REM_STADDR[3] := #IPAddr3;
#stConnSetPN.REM_STADDR[4] := #IPAddr4;
#WTemp := UINT_TO_WORD(#PortNo); // convert port-No
#stConnSetPN.REM_TSAP_ID[1] := #WTemp.%B1;
#stConnSetPN.REM_TSAP_ID[2] := #WTemp.%B0;
END_IF; // rising edge of input CONNECT
#xprevConnect := #Connect; // store state for edge detection

#xReqDisconnect := NOT #Connect AND #xConnEstablished OR #xReqDisconnect; // set request to disconnect
#xConnEstablished := #xConnEstablished AND NOT #xReqDisconnect AND NOT #xReqReconnect; // reset connection established

#fbReceive.CONT := #Connect AND NOT #xReqDisconnect AND NOT #xErrConnect; // establish connection
#fbReceive.COM_RST := #fbReceive.CONT AND #xReqReconnect OR #fbReceive.COM_RST; // restart connection
#fbReceive.EN_R := #xConnEstablished AND NOT #fbSend.BUSY; // enable receive data
#fbReceive.LEN := #iRdLength; // set length to receive

// receive data
IF #xWrToExtBuf THEN // select receive buffer
// write to external receive buffer
#fbReceive(CONNECT := #stConnSetPN,
DATA := #RcvdData);
ELSE // select receive buffer
// write to internal receive buffer
#fbReceive(CONNECT := #stConnSetPN,
DATA := #archRcvBuf);
END_IF; // select receive buffer

// result disconnect
IF (NOT #fbReceive.CONT OR #fbReceive.COM_RST) AND // disconnecting executed
NOT #fbReceive.BUSY AND (#fbReceive.DONE OR #fbReceive.STATUS = 16#80A3 // done or no connection established
) THEN
// disconnected successfully
#xReqDisconnect := FALSE; // reset request to disconnect
#xReqReconnect := FALSE; // reset request to reconnect
END_IF; // result disconnect

// result connect
IF NOT #Connect THEN // reset error connect
// reset error establish connection
#xErrConnect := FALSE;
ELSIF #fbReceive.CONT AND NOT #fbReceive.COM_RST AND NOT #xConnEstablished AND
NOT #fbReceive.BUSY AND #fbReceive.ERROR AND #fbReceive.STATUS &lt;&gt; 16#80C4 THEN
// set error establish connection
#xErrConnect := TRUE;
#wErrorCodeConnect := #fbReceive.STATUS; // save error code
ELSIF #fbReceive.CONT AND NOT #fbReceive.COM_RST AND NOT #fbReceive.EN_R AND NOT #fbReceive.BUSY AND #fbReceive.DONE THEN
// connection established successfully
#xConnEstablished := TRUE;
#chCmdId := '1'; // execute command &quot;v03&quot;
END_IF; // result establish connection
IF #xErrConnect AND NOT #xError THEN
// set error code for error by establishing connection
#xError := TRUE;
#wErrorCode := 16#8201; // set error code
#wExtErrorCode := #wErrorCodeConnect; // show error code of FB
END_IF; // error code establish connection

// result receive data
#XNdr := #fbReceive.EN_R AND NOT #fbReceive.BUSY AND #fbReceive.DONE; // new data received
IF #fbReceive.EN_R AND NOT #fbReceive.BUSY AND #fbReceive.ERROR THEN
// error receive data
#xReqReconnect := TRUE; // set request disconnect
IF NOT #xError THEN
#xError := TRUE; // set error occurred
#wErrorCode := 16#8203; // set error code
#wExtErrorCode := #fbReceive.STATUS; // show error code of receive block
END_IF; // set error code
END_IF; // error receive data

// timeout
#tonSurvT(IN := #xWaitResponse AND #fbReceive.BUSY AND #xConnEstablished,
PT := #TimeOutTime);
IF #tonSurvT.Q THEN
// no response from sensor within surveillance time
// (also happen if response string is shorter than expected;
// the receive block will not provide data as long the buffer is not full yet)
#xReqReconnect := TRUE; // set request reconnect
IF NOT #xError THEN
#xError := TRUE; // set error occurred
#wErrorCode := 16#8205; // set error code
#wExtErrorCode := 0;
END_IF; // set error code
END_IF; // error receive data

#XInitDataExch := NOT #xConnEstablished;

IF #XNdr AND NOT #XInitDataExch THEN // new data received

#iLeftRcvLength := #iLeftRcvLength - #fbReceive.RCVD_LEN; // update remaining length to receive

CASE #iRcvFunction OF // receive function selector

0: //receive 28 byte until &quot;&lt;CR&gt;&lt;LF&gt;10&quot; received
// look for &quot;&lt;CR&gt;&lt;LF&gt;10&quot; in received data;
// if found activate receive byte-wise

FOR #iTemp := 0 TO 24 DO // 25 possible DWORDs to check
IF #archRcvBuf[#iTemp] = '$R' AND #archRcvBuf[#iTemp + 1] = '$L' AND
#archRcvBuf[#iTemp + 2] = '1' AND #archRcvBuf[#iTemp + 3] = '0' THEN // &quot;&lt;CR&gt;&lt;LF&gt;10&quot; found

// prepare FOR receiving the rest Byte-wise
#xWaitResponse := FALSE;
#iRdLength := 1; // set length to receive
#iRcvFunction := 1; // activate receive function 1
END_IF; // &quot;&lt;CR&gt;&lt;LF&gt;10&quot; found
END_FOR; // 25 possible DWORDs to check

1: // receive byte-wise until protocol V03 approved
// check for response = ...&quot;1003*&lt;CR&gt;&lt;LF&gt;&quot; to confirm protocol V03 is active

#archRcvBuf[28] := #archRcvBuf[0]; // copy received byte to end of received data

// shift received data in buffer 1 byte to left
FOR #iTemp := 0 TO 27 DO
#archRcvBuf[#iTemp] := #archRcvBuf[#iTemp + 1];
END_FOR;

// check for &quot;1003&quot; and &quot;&lt;CR&gt;&lt;LF&gt;&quot;
IF #archRcvBuf[21] = '1' AND #archRcvBuf[22] = '0' AND #archRcvBuf[23] = '0' AND #archRcvBuf[24] = '3' AND
#archRcvBuf[26] = '$R' AND #archRcvBuf[27] = '$L' THEN // &quot;1003&quot; and &quot;&lt;CR&gt;&lt;LF&gt;&quot; received

// response to command &quot;v03&quot; received
IF #archRcvBuf[25] &lt;&gt; '*' THEN // check acknowledge
// protocol V03 not acknowledged
IF NOT #xError THEN // error prootocol V03
#xError := TRUE;
#wErrorCode := 16#8001; // set error code
#wExtErrorCode := 0;
END_IF; // error protocol V03
#XInitDataExch := TRUE;
ELSE // check acknowledge
// protocol V03 acknowledged
#chCmdId := '8'; // execute command &quot;a?&quot;
#iLeftRcvLength := 0; // no more data to receive
#iRcvFunction := 4; // complete command
END_IF; // check acknowledge

END_IF; // &quot;1003&quot; and &quot;&lt;CR&gt;&lt;LF&gt;&quot; received

2: // evaluate ID and length information
// identify length information andresponse-ID;
// check if payload is to receive with or without evaluation

#XErrASCII := #archRcvBuf[4] &lt;&gt; 'L' OR
#archRcvBuf[5] &lt;&gt; '0' OR #archRcvBuf[6] &lt;&gt; '0' OR #archRcvBuf[7] &lt;&gt; '0' OR #archRcvBuf[8] &lt;&gt; '0' OR
#archRcvBuf[15] &lt;&gt; '$L'; // check begin and end of length information string

// convert length from ASCII to UINT
#IDigitFactor := 10000; // set digit factor
#iLeftRcvLength := 0; // initializeremaining length to receive
FOR #iTemp := 9 TO 13 DO // loop lowest 5 length information digits
IF #archRcvBuf[#iTemp] &lt; '0' OR #archRcvBuf[#iTemp] &gt; '9' THEN // check for ASCII range 0..9
// out of range
#XErrASCII := TRUE; // set error ASCII data
ELSE // check for ASCII range 0..9
// calculate response length
#iLeftRcvLength := (CHAR_TO_UINT(#archRcvBuf[#iTemp]) - 48) * #IDigitFactor + #iLeftRcvLength;
END_IF; // check for ASCII range 0..9
#IDigitFactor := #IDigitFactor / 10; // update digit factor for next digit
END_FOR; // loop lowest 5 length information digits

IF #XErrASCII THEN // error in length infotmation data
// error in ASCII data of length information string
IF NOT #xError THEN // no error yet
#xError := TRUE;
#wErrorCode := 16#8402; // set error code
#wExtErrorCode := 0;
END_IF; // no error yet
// synchronize data exchange
#XInitDataExch := TRUE; // enable initialize data exchange
#chCmdId := '1'; // execute command &quot;v03&quot;
ELSE // error in length infotmation data
// length information extracted successfully
// prepare to receive payload data

// correct left length to receive
#iLeftRcvLength := #iLeftRcvLength - 4; // 4 Byte ticket-No. is received already

// evaluate received command-ID and ticket-No.
#chRcvId := #archRcvBuf[0]; // store received command-ID
#XSysMssgRcvd := (#archRcvBuf[0] = '0') AND (#archRcvBuf[1] = '0') AND (#archRcvBuf[2] = '0') AND (#archRcvBuf[3] = '0'); // check response-ID
#XRcvdTicketMatch := (#archRcvBuf[0] = #archSendBuf[0]) AND (#archRcvBuf[1] = #archSendBuf[1]) AND (#archRcvBuf[2] = #archSendBuf[2]) AND (#archRcvBuf[3] = #archSendBuf[3]) AND NOT #XSysMssgRcvd; // received ticket-No. match to last sent ticket-No.
#xWaitResponse := #xWaitResponse AND NOT #XRcvdTicketMatch; // reset wait for response if response of command is received

// select receive buffer for payload data to receive
#xRcvSysMssgToExt := #XSysMssgRcvd AND NOT #Trigger AND NOT #ChangeApp AND NOT #xError;
#xInitExtRcvBuf := #xRcvSysMssgToExt OR #XRcvdTicketMatch AND #chRcvId = '9' AND NOT #XErrRcvBuf;
#xWrToExtBuf := #xInitExtRcvBuf AND #iLeftRcvLength &lt;&gt; 3;
IF #xWrToExtBuf THEN // select receive buffer
// use external receive buffer
#iBufSize := INT_TO_UINT(#DataArrayEnd + 1); // set receive buffer size to size of external buffer
#iTriggerRespLength := #iLeftRcvLength; // store received payload data length
ELSE // select receive buffer
// use internal receive buffer
#iBufSize := 32; // set receive buffer size to size of internal buffer
#iTriggerRespLength := 0; // initialize received payload data length
END_IF; // select receive buffer

#iRdLength := MIN(IN1 := #iLeftRcvLength, IN2 := #iBufSize); // limit receive length to receive buffer size
#xNewString := TRUE; // set new string will be received

// select next receive function
IF NOT #XRcvdTicketMatch OR #xWrToExtBuf THEN
#iRcvFunction := 4; // receive data without evaluation
ELSE
#iRcvFunction := 3; // receive data to evaluate
END_IF; // select next receive function

END_IF; // error in length infotmation data

3: // evaluate response data
IF #fbReceive.RCVD_LEN = 3 AND #archRcvBuf[0] = '?' AND #archRcvBuf[1] = '$R' AND #archRcvBuf[2] = '$L' THEN
// sensor returns &quot;command unknown&quot;
IF NOT #xError THEN
// error command unknown
#xError := TRUE;
#wErrorCode := 16#8300; // set error code
#wExtErrorCode := 0;
END_IF; // error command unknown
#iRcvFunction := 4; // finish data reception

ELSIF #fbReceive.RCVD_LEN = 3 AND #archRcvBuf[0] = '!' AND #archRcvBuf[1] = '$R' AND #archRcvBuf[2] = '$L' THEN
// sensor returns &quot;unable to execute command&quot;
// get error code from sensor
#chCmdId := '2'; // execute command &quot;E?&quot;
#iRcvFunction := 4; // finish data reception
ELSE
// data to evaluate received
// evaluate received data of each command special
CASE CHAR_TO_INT(#chRcvId) - 48 OF // convert ASCII to integer

2: // evaluate response to command &quot;E?&quot;
// error code from sensor received
#wErrorCodeSensor.%B1 := INT_TO_BYTE((CHAR_TO_INT(#archRcvBuf[0]) - 48) * 16 + (CHAR_TO_INT(#archRcvBuf[1]) - 48)); // convert hi-byte of error code
#wErrorCodeSensor.%B0 := INT_TO_BYTE((CHAR_TO_INT(#archRcvBuf[2]) - 48) * 16 + (CHAR_TO_INT(#archRcvBuf[3]) - 48)); // convert low-byte of error code
IF NOT #xError THEN
// error sensor unable to execute command
#xError := TRUE;
#wErrorCode := 16#8000; // set error code
#wExtErrorCode := #wErrorCodeSensor; // show error code from sensor
END_IF; // error sensor unable to execute command
#iRcvFunction := 4; // finish data reception

4: // evaluate response to command &quot;c + group and application-No.&quot;
#chCmdId := '8'; // execute command &quot;a?&quot;
#iRcvFunction := 4; // finish data reception

8: // evaluate response to command &quot;a?&quot;
// extract number of active configuration and convert ASCII to integer
#iActAppNo := (CHAR_TO_UINT(#archRcvBuf[5]) - 48) * 10 + CHAR_TO_UINT(#archRcvBuf[6]) - 48;
#iRcvFunction := 4; // finish data reception

9: // evaluate response to command &quot;T?&quot;
// response length = 3 characters but not a negative acknowledge;
// that's why copy receive data into external receive buffer
#RcvdData[0] := #archRcvBuf[0];
#RcvdData[1] := #archRcvBuf[1];
#RcvdData[2] := #archRcvBuf[2];
#iTriggerRespLength := 3; // store received payload data length
#iRcvFunction := 4; // finish data reception

ELSE // CASE
#iRcvFunction := 4; // flush data without evaluation
END_CASE; // evaluate received data of each command special
END_IF; // evaluate response data

END_CASE; // receive function selector

// receive data without evaluation
IF #iRcvFunction = 4 AND NOT #XInitDataExch THEN // receive function 4 active

// receive data without evaluation
IF #iLeftRcvLength &gt; 0 THEN // receiving data completed?
// not all data received yet
IF NOT #xNewString AND #xWrToExtBuf THEN
// external buffer full
IF NOT #xError THEN // error external receive buffer too small
#xError := TRUE;
#wErrorCode := 16#8401; // set error code
#wExtErrorCode := UINT_TO_WORD(#iTriggerRespLength); // show trigger response length
END_IF; // error external receive buffer too small
#xWrToExtBuf := FALSE; // change to internal receive buffer
#iBufSize := 32; // set size of used buffer
END_IF; // external buffer full
#iRdLength := MIN(IN1 := #iLeftRcvLength, IN2 := #iBufSize); // limit receive length
#xNewString := FALSE; // reset new string to receive

ELSE // receiving data completed?
// all data received
#xWrToExtBuf := FALSE; // activate internal receive buffer
#xBusy := #xBusy AND #xWaitResponse; // enable new command
#iRdLength := 20; // set length 16 byte length information string + 4 byte ticket-No.
#iRcvFunction := 2; // activate receive function 2
END_IF; // receiving data completed?
END_IF; // receive function 4 active

END_IF; // new data received

// initialize data exchange
IF #XInitDataExch THEN
// prepare for receiving response to command &quot;v03&quot;
#xBusy := FALSE;
#xWrToExtBuf := FALSE;
#xRcvSysMssgToExt := FALSE;
#iRdLength := 28; // set initial length to read
#iRcvFunction := 0; // activate receive function 0
END_IF; // initialize data exchange

//**************************************************************
// request send command
IF #XreTrigger THEN
#chUserCmdId := '9'; // store user requested command-ID
#xUserAction := TRUE; // user action started
END_IF;
IF #XreChangeApp THEN
#chUserCmdId := '4'; // store user requested command-ID
#xUserAction := TRUE; // user action started
END_IF;
IF (#XreTrigger OR #XreChangeApp) AND NOT #xError THEN
#chCmdId := #chUserCmdId; // apply requested command
END_IF;
#fbSend.REQ := #chCmdId &lt;&gt; '0' AND #xConnEstablished AND NOT #fbSend.BUSY AND NOT #xBusy; // activate sending data

IF #fbSend.REQ THEN // build command to send
#xBusy := TRUE; // set busy
#xInitExtRcvBuf := TRUE; // initialize external receive buffer

// create new ticket-ID
//#iTicketID := INT_TO_BYTE((BYTE_TO_INT(#iTicketID) + 1));
IF #iTicketID &lt; 999 THEN
#iTicketID := #iTicketID + 1; // increase previous ticket-ID
ELSE // limit reached
#iTicketID := 1; // reset ticket-ID counter
END_IF;

// fill most common parts into send buffer
#archSendBuf[0] := #chCmdId; // command-ID
#archSendBuf[1] := INT_TO_CHAR(#iTicketID / 100 + 48); // convert 100th digit of ticket-ID to ASCII
#iTemp := #iTicketID - #iTicketID / 100 * 100; // get rest of division
#archSendBuf[2] := INT_TO_CHAR(#iTemp / 10 + 48); // convert 10th digit of ticket-ID to ASCII
#iTemp := #iTemp - #iTemp / 10 * 10; // get rest of division
#archSendBuf[3] := INT_TO_CHAR(#iTemp + 48); // convert 1th digit of ticket-ID to ASCII
#archSendBuf[4] := 'L';
FOR #iTemp := 5 TO 12 DO // preset length information with &quot;0&quot;
#archSendBuf[#iTemp] := '0';
END_FOR;
#archSendBuf[13] := '8'; // preset most common command length = 8 bytes
#archSendBuf[14] := '$R'; // &quot;&lt;CR&gt;&quot;
#archSendBuf[15] := '$L'; // &quot;&lt;LF&gt;&quot;
#archSendBuf[16] := #archSendBuf[0]; // repeat ticket-No.
#archSendBuf[17] := #archSendBuf[1];
#archSendBuf[18] := #archSendBuf[2];
#archSendBuf[19] := #archSendBuf[3];
FOR #iTemp := 20 TO 39 DO // preset rest of send buffer with &quot; &quot;
#archSendBuf[#iTemp] := ' ';
END_FOR;

// select command
CASE CHAR_TO_INT(#chCmdId) - 48 OF // concvert ASCII to integer

1: // command &quot;v03&quot; in all protocol versions
// &quot;v03&lt;CR&gt;&lt;LF&gt;&quot; for protocol 1 and 4
// &quot;1002v03&lt;CR&gt;&lt;LF&gt;&quot; for protocol 2
// &quot;1003L000000009&lt;CR&gt;&lt;LF&gt;1003v03&lt;CR&gt;&lt;LF&gt;&quot; for protocol 3
Strg_TO_Chars(Strg := 'v03$R$L1002v03$R$L1003L000000009$R$L1003v03$R$L', // source string
Chars := #archSendBuf, // destination array
pChars := 0, // destination start index
Cnt =&gt; #fbSend.LEN); // length to send

2: // command &quot;E?&quot;
#archSendBuf[20] := 'E';
#archSendBuf[21] := '?';
#archSendBuf[22] := '$R'; // &quot;&lt;CR&gt;&quot;
#archSendBuf[23] := '$L'; // &quot;&lt;LF&gt;&quot;
#fbSend.LEN := 24; // set length to send

4: // command &quot;c + group-No. + application-No.&quot;
#archSendBuf[12] := '1'; // overwrite preset payload data length
#archSendBuf[13] := '0'; // command length = 10 bytes
#archSendBuf[20] := 'c';
#archSendBuf[21] := UINT_TO_CHAR(#AppNo / 100 + 48); // convert 100th digit of input APPLICATION-NO. to ASCII
#iTemp := UINT_TO_INT(#AppNo - #AppNo / 100 * 100); // get rest of division
#archSendBuf[22] := INT_TO_CHAR(#iTemp / 10 + 48); // convert 10th digit of APPLICATION-NO. to ASCII
#iTemp := #iTemp - #iTemp / 10 * 10; // get rest of division
#archSendBuf[23] := INT_TO_CHAR(#iTemp + 48); // convert 1th digit of APPLICATION-NO. to ASCII
#archSendBuf[24] := '$R'; // &quot;&lt;CR&gt;&quot;
#archSendBuf[25] := '$L'; // &quot;&lt;LF&gt;&quot;
#fbSend.LEN := 26; // set length to send

8: // command &quot;a?&quot;
#archSendBuf[20] := 'a';
#archSendBuf[21] := '?';
#archSendBuf[22] := '$R'; // &quot;&lt;CR&gt;&quot;
#archSendBuf[23] := '$L'; // &quot;&lt;LF&gt;&quot;
#fbSend.LEN := 24; // set length to send

9: // command &quot;t?&quot; nderung
#archSendBuf[20] := 't';
#archSendBuf[21] := '$R';
#archSendBuf[22] := '$L'; // &quot;&lt;CR&gt;&quot;
//#archSendBuf[23] := '$L'; // &quot;&lt;LF&gt;&quot;
#fbSend.LEN := 23; // set length to send

ELSE // unknown commadn-ID
#fbSend.REQ := false; // reset send request
END_CASE; // select command

// command is build, initialize command-ID
#chCmdId := '0';
END_IF; // build command to send

// send data
#fbSend(ID := #stConnSetPN.ID,
DATA := #archSendBuf); // send data

// check send result
IF NOT #fbSend.BUSY THEN
// no data transfer in progress
IF #fbSend.DONE THEN
// data sent without error
#xWaitResponse := TRUE; // set wait for response
ELSIF #fbSend.ERROR THEN
// error while sending data
#xReqReconnect := TRUE; // set request reconnect
IF NOT #xError THEN
#xError := true;
#wErrorCode := 16#8204; // set error code
#wExtErrorCode := #fbSend.STATUS; // show error code of send block
END_IF; // send error
END_IF; // no data transfer in progress
END_IF; // send result

// build internal status sode
IF NOT #fbReceive.CONT AND NOT #fbReceive.BUSY THEN
#wStatus := 16#1000; // disconnected
ELSIF NOT #fbReceive.CONT AND #fbReceive.BUSY THEN
#wStatus := 16#1001; // disconnecting in progress
ELSIF NOT #xConnEstablished AND #fbReceive.COM_RST AND #fbReceive.BUSY THEN
#wStatus := 16#1002; // reset connecting in progress
ELSIF NOT #xConnEstablished AND #fbReceive.COM_RST AND NOT #fbReceive.BUSY THEN
#wStatus := 16#1003; // reset connection done
ELSIF NOT #xConnEstablished AND NOT #fbReceive.COM_RST AND #fbReceive.BUSY THEN
#wStatus := 16#1004; // connecting in progress
ELSIF NOT #xConnEstablished AND NOT #fbReceive.COM_RST AND NOT #fbReceive.BUSY THEN
#wStatus := 16#1005; // connecting done
ELSIF #iRcvFunction &lt; 2 THEN
// synchronisazion phase
IF #fbSend.BUSY THEN
#wStatus := 16#2001; // send command &quot;v03&quot;
ELSIF #iRcvFunction = 0 THEN
#wStatus := 16#2002;
ELSE
#wStatus := 16#2003;
END_IF;
// end synchronisazion phase
ELSE
// data exchange phase
IF NOT #xBusy AND #iRcvFunction = 2 THEN
#wStatus := 16#7000;
ELSIF #fbSend.BUSY THEN
#wStatus := 16#7001; // send data active
ELSE
#wStatus := 16#7000 OR UINT_TO_WORD(#iRcvFunction);
END_IF;
IF #xBusy THEN
#bCmdId := INT_TO_BYTE(CHAR_TO_INT(#archSendBuf[0]) - 48); // convert ASCII to byte
#wStatus.%B1 := #wStatus.%B1 OR #bCmdId; // add avtive command-ID
END_IF;
// end data exchange phase
END_IF; // build internal status sode

// keep output DONE and ERROR as long the triggering input still active
#XKeepOutput := ((#chUserCmdId = '9') AND #Trigger OR (#chUserCmdId = '4') AND #ChangeApp) AND NOT #XreTrigger AND NOT #XreChangeApp;

// output ERROR
#Error := (#xError OR #XErrRcvBuf) AND NOT #xBusy // error occurred and no command in progress
OR #Error AND #XKeepOutput; // keep output as long triggering input still set

// output DONE
#Done := ((#iRcvFunction = 2) AND #xRcvSysMssgToExt // receive system message to ext. buffer finished
OR #xUserAction // user action started
) AND NOT #xBusy AND NOT #Error // no command in progress and no error
OR #Done AND #XKeepOutput; // keep output as long triggering input still set

// output BUSY
#Busy := #xBusy OR NOT #xConnEstablished;
#xUserAction := #xUserAction AND #xBusy; // reset user action started

// output STATUS and EXTSTATUS
IF #Done THEN
// if output DONE is set, show STATUS = 0x0000, EXTSTATUS = internal status code
#Status := 16#0000;
#ExtStatus := #wStatus;
ELSIF #Error THEN
// if output ERROR is set, show error codes STATUS and EXTSTATUS
#Status := #wErrorCode;
#ExtStatus := #wExtErrorCode;
ELSE
// else show STATUS = internal status code, EXTSTATUS = status of receive block
#Status := #wStatus;
#ExtStatus := #fbReceive.STATUS;
END_IF; // end output STATUS

// output ACTIVE APPLICATION-NO. in the sensor
IF NOT #xConnEstablished THEN
#iActAppNo := 0; // reset active application
END_IF;
#ActAppNo := #iActAppNo;

// output DATA LENGTH in external receive buffer
IF #xUserAction OR #xInitExtRcvBuf OR #XErrRcvBuf THEN
#RcvdLen := 0;
ELSIF #Done THEN
#RcvdLen := #iTriggerRespLength;
END_IF;

// reset receive system message to external receive buffer
#xRcvSysMssgToExt := #xRcvSysMssgToExt AND NOT #Done; // reset if output DONE is set